# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_data-token-classification.ipynb (unless otherwise specified).

__all__ = ['get_slow_word_ids', 'BaseLabelingStrategy', 'OnlyFirstTokenLabelingStrategy', 'SameLabelLabelingStrategy',
           'BILabelingStrategy', 'align_labels_with_tokens', 'align_labels_with_words',
           'pre_process_token_classification', 'HF_TokenTensorCategory', 'HF_TokenCategorize', 'HF_TokenCategoryBlock',
           'HF_TokenClassInput', 'HF_TokenClassBeforeBatchTransform']

# Cell
import os
from typing import List, Tuple

from fastcore.all import *
from fastai.data.block import TransformBlock, Category, CategoryMap
from fastai.imports import *
from fastai.losses import CrossEntropyLossFlat
from fastai.torch_core import *
from fastai.torch_imports import *
from transformers import AutoModelForTokenClassification, logging, PretrainedConfig, PreTrainedTokenizerBase, PreTrainedModel

from ..utils import BLURR
from .core import HF_BaseInput, HF_BeforeBatchTransform, first_blurr_tfm

logging.set_verbosity_error()


# Cell
def get_slow_word_ids(hf_arch: str, hf_tokenizer: PreTrainedTokenizerBase, input_ids: List[int], special_tokens_mask):





    if hf_arch == 'canine':
        toks = hf_tokenizer.convert_ids_to_tokens(input_ids, skip_special_tokens=True)
        word_list = [word for word in hf_tokenizer.convert_tokens_to_string([tok for tok in toks]).split() ]
        n_tokens_per_word = [len(hf_tokenizer.tokenize(word)) + 1 for word in word_list]
    else:
        word_list = hf_tokenizer.decode(input_ids, skip_special_tokens=True).split()
        n_tokens_per_word = [len(hf_tokenizer.tokenize(word)) for word in word_list]

    word_ids, word_idx, tok_idx = [], 0, 0
    while tok_idx < len(special_tokens_mask):
        if (special_tokens_mask[tok_idx] == 1):
            word_ids.append(None)
            tok_idx += 1
        else:
            n_tokens = n_tokens_per_word[word_idx]
            word_ids += [word_idx] * n_tokens
            tok_idx += n_tokens
            word_idx += 1

    return word_ids

# def get_slow_word_ids(hf_tokenizer: PreTrainedTokenizerBase, text: Union[str, List[str]], input_ids: List[int], is_split_into_words: bool = False):
#     word_id_lists = [[idx] * len(hf_tokenizer.tokenize(str(word))) for idx, word in enumerate(text)]
#     word_ids = [word_id for word_id_list in word_id_lists for word_id in word_id_list]

#     encoding = hf_tokenizer(text, is_split_into_words=is_split_into_words, return_special_tokens_mask=True, padding="max_length", max_length=len(input_ids))
#     return [None if el == 1 else word_ids.pop(0) for el in encoding["special_tokens_mask"]]


# Cell
class BaseLabelingStrategy:
    def __init__(self, hf_tokenizer: PreTrainedTokenizerBase, ignore_token_id: int = CrossEntropyLossFlat().ignore_index) -> None:
        self.hf_tokenizer = hf_tokenizer
        self.ignore_token_id = ignore_token_id

    def align_labels_with_tokens(self, label_names, word_ids, word_labels):
        raise NotImplementedError()


# Cell
class OnlyFirstTokenLabelingStrategy(BaseLabelingStrategy):
    """
    Only the first token of word is associated with the label (all other subtokens with the `ignore_index_id`)
    """

    def align_labels_with_tokens(self, label_names, word_ids, word_labels):
        new_labels = []
        current_word = None
        for word_id in word_ids:
            if word_id != current_word:
                # start of a new word
                current_word = word_id
                label = self.ignore_token_id if word_id is None else word_labels[word_id]
                new_labels.append(label if isinstance(label, int) else label_names.index(label))
            else:
                # special token or another subtoken of current word
                new_labels.append(self.ignore_token_id)

        return new_labels


class SameLabelLabelingStrategy(BaseLabelingStrategy):
    """
    Every token associated with a given word is associated with the word's label
    """

    def align_labels_with_tokens(self, label_names, word_ids, word_labels):
        new_labels = []
        for word_id in word_ids:
            if word_id == None:
                new_labels.append(self.ignore_token_id)
            else:
                label = word_labels[word_id]
                new_labels.append(label if isinstance(label, int) else label_names.index(label))

        return new_labels


class BILabelingStrategy(BaseLabelingStrategy):
    """
    If using B/I labels, the first token assoicated to a given word gets the "B" label while all other tokens related
    to that same word get "I" labels.  If "I" labels don't exist, this strategy behaves like the `SameLabelLabelingStrategy`.
    """

    def align_labels_with_tokens(self, label_names, word_ids, word_labels):
        new_labels = []
        current_word = None
        for word_id in word_ids:
            if word_id != current_word:
                # start of a new word
                current_word = word_id
                label = self.ignore_token_id if word_id is None else word_labels[word_id]
                new_labels.append(label if isinstance(label, int) else label_names.index(label))
            elif word_id is None:
                # special token
                new_labels.append(self.ignore_token_id)
            else:
                # we're in the same word
                label = word_labels[word_id]
                label_name = label_names[label] if isinstance(label, int) else label

                # append the I-{ENTITY} if it exists in `labels`, else default to the `same_label` strategy
                iLabel = f"I-{label_name[2:]}"
                new_labels.append(label_names.index(iLabel) if iLabel in label_names else label)

        return new_labels


# Cell
def align_labels_with_tokens(
    # A Hugging Face tokenizer
    hf_tokenizer: PreTrainedTokenizerBase,
    # List of input_ids for the tokens in a single piece of processed text
    input_ids: List[int],
    # List of label indexs for each token
    token_label_ids,
    # List of label names from witch the `label` indicies can be used to find the name of the label
    vocab,
    # The token ID that should be ignored when calculating the loss
    ignore_token_id=CrossEntropyLossFlat().ignore_index,
) -> List[Tuple[str, str]]:
    """
    Given a list of input IDs, the label ID associated to each, and the labels vocab, this method will return a list of tuples whereby
    each tuple defines the "token" and its label name. For example:
    [('ĠWay', B-PER), ('de', B-PER), ('ĠGill', I-PER), ('iam', I-PER), ('Ġloves'), ('ĠHug', B-ORG), ('ging', B-ORG), ('ĠFace', I-ORG)]
    """
    # convert ids to tokens
    toks = hf_tokenizer.convert_ids_to_tokens(input_ids)
    # align "tokens" with labels
    tok_labels = [
        (tok, "xUNKx" if label_id == ignore_token_id else vocab[label_id])
        for tok_id, tok, label_id in zip(input_ids, toks, token_label_ids)
        if tok_id not in hf_tokenizer.all_special_ids
    ]
    return tok_labels


# Cell
def align_labels_with_words(
    hf_arch: str,
    # A Hugging Face tokenizer
    hf_tokenizer: PreTrainedTokenizerBase,
    # A list of tuples, where each represents a token and its label (e.g., [('ĠHug', B-ORG), ('ging', B-ORG), ('ĠFace', I-ORG), ...])
    tok_labels
) -> List[Tuple[str, str]]:
    """
    Given a list of tuples where each tuple defines a token and its label, return a list of tuples whereby each tuple defines the
    "word" and its label. Method assumes that model inputs are a list of words, and in conjunction with the `align_labels_with_tokens` method,
    allows the user to reconstruct the orginal raw inputs and labels.
    """
    # recreate raw words list (we assume for token classification that the input is a list of words)
    words = hf_tokenizer.convert_tokens_to_string([tok_label[0] for tok_label in tok_labels]).split()

    if hf_arch == "canine":
        word_list = [f"{word} " for word in words]
    else:
        word_list = [word for word in words]

    # align "words" with labels
    word_labels, idx = [], 0
    for word in word_list:
        word_labels.append((word, tok_labels[idx][1]))
        idx += len(hf_tokenizer.tokenize(word))

    return word_labels


# Cell
def pre_process_token_classification(
    # Your pd.DataFrame
    raw_df,
    hf_arch: str,
    # A Hugging Face tokenizer
    hf_tokenizer: PreTrainedTokenizerBase,
    # The token ID that should be ignored when calculating the loss
    ignore_token_id=CrossEntropyLossFlat().ignore_index,
    # The label names (if not specified, will build from DataFrame)
    label_names: Optional[List[str]] = None,
    # The attribute in your dataset that contains the list of words (default: 'tokens')
    word_list_attr: str = "tokens",
    # The attribute in your dataset that contains the list of labels associated to each word (default: 'labels')
    label_list_attr: str = "labels",
    # The labeling strategy you want to apply when associating labels with word tokens
    labeling_strategy_cls: BaseLabelingStrategy = OnlyFirstTokenLabelingStrategy,
    # Other column data from the raw DataFrame you want to include in the processed DataFrame
    keep_cols: list = [],
    # Any keyword arguments you want your Hugging Face tokenizer to use during tokenization
    tok_kwargs: dict = {"is_split_into_words": True, "return_special_tokens_mask": True},
) -> Tuple[pd.DataFrame, List[str]]:
    """
    This preprocessing routine is designed to work with labels that are a list of label names (e.g., B-PER, I-PER, etc...) or
    a list of label Ids (e.g., 0, 0, 2, etc...) which can be indexed into `label_names` to get their names.
    Assuming you are using the later approach, you must pass a list of label names into this method via the `label_names` argument.
    If you are using the former approach, passing `label_names` is optional. If you don't, asorted list of the the distinct label
    names will be created for you, which you should specify in either the mid or low-level API to ensure the model will use
    the right label indexes when building your targets.
    """
    df = raw_df.copy()
    labeling_strategy = labeling_strategy_cls(hf_tokenizer=hf_tokenizer, ignore_token_id=ignore_token_id)

    if label_names is None:
        label_names = sorted(list(set([lbls for sublist in df[label_list_attr].tolist() for lbls in sublist])))

    proc_data = []
    for row_idx, row in df.iterrows():
        # fetch data elements required to build a modelable dataset
        words, word_labels = row[word_list_attr], row[label_list_attr]

        if not is_listy(words):
            words = words.split()

        encoding = hf_tokenizer(words, truncation=True, **tok_kwargs)
        word_ids = (
            encoding.word_ids()
            if hf_tokenizer.is_fast
            else get_slow_word_ids(hf_arch, hf_tokenizer, encoding["input_ids"], encoding["special_tokens_mask"])
        )
        aligned_labels = labeling_strategy.align_labels_with_tokens(label_names, word_ids, word_labels)

        row_data = [encoding["input_ids"], aligned_labels, words, word_labels]
        row_data += [row[col] for col in keep_cols]
        proc_data.append(row_data)

    # put processed data into a new DataFrame and return
    proc_df = pd.DataFrame(proc_data, columns=["input_ids", "label_ids", word_list_attr, label_list_attr] + keep_cols)
    return proc_df, label_names


# Cell
class HF_TokenTensorCategory(TensorBase):
    pass


# Cell
class HF_TokenCategorize(Transform):
    """Reversible transform of a list of category string to `vocab` id"""

    def __init__(
        self,
        # The unique list of entities (e.g., B-LOC) (default: CategoryMap(vocab))
        vocab=None,
        # The token used to identifiy ignored tokens (default: xIGNx)
        ignore_token=None,
        # The token ID that should be ignored when calculating the loss (default: CrossEntropyLossFlat().ignore_index)
        ignore_token_id=None,
    ):
        self.vocab = None if vocab is None else CategoryMap(vocab, sort=False)
        self.ignore_token = "[xIGNx]" if ignore_token is None else ignore_token
        self.ignore_token_id = CrossEntropyLossFlat().ignore_index if ignore_token_id is None else ignore_token_id

        self.loss_func, self.order = CrossEntropyLossFlat(ignore_index=self.ignore_token_id), 1

    def setups(self, dsets):
        if self.vocab is None and dsets is not None:
            self.vocab = CategoryMap(dsets)
        self.c = len(self.vocab)

    def encodes(self, labels):
        # if `val` is the label name (e.g., B-PER, I-PER, etc...), lookup the corresponding index in the vocab using
        # `self.vocab.o2i`
        ids = [val if (isinstance(val, int)) else self.vocab.o2i[val] for val in labels]
        return HF_TokenTensorCategory(ids)

    def decodes(self, encoded_labels):
        return Category([(self.vocab[lbl_id]) for lbl_id in encoded_labels if lbl_id != self.ignore_token_id])


# Cell
def HF_TokenCategoryBlock(
    # The unique list of entities (e.g., B-LOC) (default: CategoryMap(vocab))
    vocab=None,
    # The token used to identifiy ignored tokens (default: xIGNx)
    ignore_token=None,
    # The token ID that should be ignored when calculating the loss (default: CrossEntropyLossFlat().ignore_index)
    ignore_token_id=None,
):
    """`TransformBlock` for per-token categorical targets"""
    return TransformBlock(type_tfms=HF_TokenCategorize(vocab=vocab, ignore_token=ignore_token, ignore_token_id=ignore_token_id))


# Cell
class HF_TokenClassInput(HF_BaseInput):
    pass


# Cell
class HF_TokenClassBeforeBatchTransform(HF_BeforeBatchTransform):
    def __init__(
        self,
        # The abbreviation/name of your Hugging Face transformer architecture (e.b., bert, bart, etc..)
        hf_arch: str,
        # A specific configuration instance you want to use
        hf_config: PretrainedConfig,
        # A Hugging Face tokenizer
        hf_tokenizer: PreTrainedTokenizerBase,
        # A Hugging Face model
        hf_model: PreTrainedModel,
        # If you are passing in the "inpu_ids" as your inputs, set `is_numericalised` = True
        is_numericalized: bool = False,
        # The token ID that should be ignored when calculating the loss
        ignore_token_id=CrossEntropyLossFlat().ignore_index,
        # The labeling strategy you want to apply when associating labels with word tokens
        labeling_strategy_cls: BaseLabelingStrategy = OnlyFirstTokenLabelingStrategy,
        # To control the length of the padding/truncation. It can be an integer or None,
        # in which case it will default to the maximum length the model can accept. If the model has no
        # specific maximum input length, truncation/padding to max_length is deactivated.
        # See [Everything you always wanted to know about padding and truncation](https://huggingface.co/transformers/preprocessing.html#everything-you-always-wanted-to-know-about-padding-and-truncation)
        max_length: int = None,
        # To control the `padding` applied to your `hf_tokenizer` during tokenization. If None, will default to
        # `False` or `'do_not_pad'.
        # See [Everything you always wanted to know about padding and truncation](https://huggingface.co/transformers/preprocessing.html#everything-you-always-wanted-to-know-about-padding-and-truncation)
        padding: Union[bool, str] = True,
        # To control `truncation` applied to your `hf_tokenizer` during tokenization. If None, will default to
        # `False` or `do_not_truncate`.
        # See [Everything you always wanted to know about padding and truncation](https://huggingface.co/transformers/preprocessing.html#everything-you-always-wanted-to-know-about-padding-and-truncation)
        truncation: Union[bool, str] = True,
        # The `is_split_into_words` argument applied to your `hf_tokenizer` during tokenization. Set this to `True`
        # if your inputs are pre-tokenized (not numericalized)
        is_split_into_words: bool = True,
        # Any other keyword arguments you want included when using your `hf_tokenizer` to tokenize your inputs
        tok_kwargs={},
        # Keyword arguments to apply to `HF_TokenClassBeforeBatchTransform`
        **kwargs
    ):
        tok_kwargs = {**tok_kwargs, **{"return_special_tokens_mask": True}}

        super().__init__(
            hf_arch,
            hf_config,
            hf_tokenizer,
            hf_model,
            is_numericalized=is_numericalized,
            ignore_token_id=ignore_token_id,
            max_length=max_length,
            padding=padding,
            truncation=truncation,
            is_split_into_words=is_split_into_words,
            tok_kwargs=tok_kwargs,
            **kwargs
        )

        self.labeling_strategy = labeling_strategy_cls(hf_tokenizer, ignore_token_id=ignore_token_id)

    def encodes(self, samples):
        encoded_samples, batch_encoding = super().encodes(samples, return_batch_encoding=True)

        # if there are no targets (e.g., when used for inference) or the inputs/targets have already been preprocessed,
        # there is no need to do any post-processing on the labels
        if len(encoded_samples[0]) == 1 or self.is_numericalized:
            return encoded_samples

        # get the type of our targets (by default will be HF_TokenTensorCategory)
        target_cls = type(encoded_samples[0][1])

        # we assume that first target = the categories we want to predict for each token
        updated_samples = []
        for idx, s in enumerate(encoded_samples):
            word_ids = (
                batch_encoding.word_ids(idx)
                if self.hf_tokenizer.is_fast
                else get_slow_word_ids(self.hf_arch, self.hf_tokenizer, s[0]["input_ids"], s[0]["special_tokens_mask"])
            )
            targ_ids = target_cls(self.labeling_strategy.align_labels_with_tokens(None, word_ids, s[1].tolist()))

            updated_samples.append((s[0], targ_ids))

        return updated_samples


# Cell
@typedispatch
def show_batch(
    # This typedispatched `show_batch` will be called for `HF_TokenClassInput` typed inputs
    x: HF_TokenClassInput,
    y,
    # Your raw inputs/targets
    samples,
    # Your `DataLoaders`. This is required so as to get at the Hugging Face objects for
    # decoding them into something understandable
    dataloaders,
    # Your `show_batch` context
    ctxs=None,
    # The maximum number of items to show
    max_n=6,
    # Any truncation your want applied to your decoded inputs
    trunc_at=None,
    # Any other keyword arguments you want applied to `show_batch`
    **kwargs,
):
    # grab our tokenizer
    tfm = first_blurr_tfm(dataloaders, before_batch_tfm_class=HF_TokenClassBeforeBatchTransform)
    hf_arch, hf_tokenizer = tfm.hf_arch, tfm.hf_tokenizer
    vocab = dataloaders.vocab

    res = L()
    for inp, trg, sample in zip(x, y, samples):
        # align "tokens" with labels
        tok_labels = align_labels_with_tokens(hf_tokenizer, inp, trg, vocab)
        # align "words" with labels
        word_labels = align_labels_with_words(hf_arch, hf_tokenizer, tok_labels)
        # stringify list of (word,label) for example
        res.append([f"{[ word_targ for idx, word_targ in enumerate(word_labels) if (trunc_at is None or idx < trunc_at) ]}"])

    display_df(pd.DataFrame(res, columns=["word / target label"])[:max_n])
    return ctxs
